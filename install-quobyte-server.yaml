---
- hosts: cluster
  vars_files:
    - vars/quobyte.yaml
  become: yes
  tasks:
    - name: Download Quobyte Software for id {{ repo_id }}
      get_url:
        url: https://packages.quobyte.com/repo/3/{{ repo_id }}/install_quobyte
        dest: ~/install_quobyte
        mode: '0755'
    - name: Supports a validate command
      replace:
        path: ~/install_quobyte
        regexp: 'sudo dpkg-reconfigure --unseen-only postfix'
        replace: ''
    - name: Install Epel Centos
      yum:
        name: epel-release
        state: present
        update_cache: yes
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
    - name: Install packages Centos
      yum:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - java-1.8.0-openjdk
        - java-11-openjdk-devel
        - openjdk-11-jre-headless  
        - chrony
        - atop
        - htop
        - numactl
        - netdata
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
    - name: Install packages Ubuntu
      apt:
        name: "{{ packages }}"
        state: present
      vars:
        packages:
        - openjdk-8-jre-headless
        - openjdk-11-jre-headless
        - chrony
        - atop
        - htop
        - numactl
        - netdata
        - tuned
        - postfix
    - name: Disable SE Linux
      shell:
        cmd: /usr/sbin/setenforce 0
      register: command_result
      failed_when: "'ERROR' in command_result.stderr"
      ignore_errors: yes
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
    - name: Ensure SELinux is set to disabled mode
      lineinfile:
        path: /etc/selinux/config
        regexp: '^SELINUX='
        line: SELINUX=disabled
      ignore_errors: yes
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
    - name: Ensure Apparmor is stopped
      service:
        name: apparmor
        state: stopped
        enabled: no
      ignore_errors: yes
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    - name: Remove apparmor
      package:
        name: apparmor
        state: absent
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      ignore_errors: yes
    - name: Remove swaps from fstab
      lineinfile:
        dest: /etc/fstab
        regexp: '^/[\S]+\s+swap\s+swap'
        state: absent
      notify: disable swap
    - name: Disable swap
      shell:
        cmd: swapoff -a
    - name: Copy Network tune config
      copy:
         src: templates/network-tune
         dest: /etc/init.d/
         mode: '0770'
    - name: Copy Network tune service
      copy:
         src: templates/network-tune.service
         dest: /etc/systemd/system/
    - name: Reload service daemon
      shell:
        cmd: systemctl daemon-reload
    - name: Start and enable Network tune service
      service:
        name: network-tune
        state: started
        enabled: yes
    - name: Ensure irqbalance is set to oneshot - Centos
      lineinfile:
        path: /etc/sysconfig/irqbalance
        regexp: '^#IRQBALANCE_ONESHOT='
        line: IRQBALANCE_ONESHOT=1
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
    - name: Ensure irqbalance is set to oneshot - Ubuntu
      lineinfile:
        path: /etc/default/irqbalance
        regexp: '^#IRQBALANCE_ONESHOT='
        line: IRQBALANCE_ONESHOT=1
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    - name: Restart irqbalance
      service:
        name: irqbalance
        state: restarted 
        enabled: yes
- hosts: diskformat
  vars_files:
  - vars/quobyte.yaml
  become: yes
  tasks:
    - name: Create a list of all devices
      shell:
        cmd: lsblk -dn -o NAME,TYPE |grep disk |awk '{print $1}'
      register: list_all
    - set_fact: flist_all="{{ list_all.stdout_lines }}"
    - name: Create a list of non empty devices
      shell:
        cmd: blkid |awk '{print $1}'|sed 's/://'|sed 's/[0-9]\+$//'|uniq
      register: list_non_empty
    - set_fact: flist_non_empty="{{ list_non_empty.stdout }}"
    - set_fact:
        flist_empty: "{{ list_all.stdout_lines | difference (list_non_empty.stdout) }}"
    - name: Create filesystem on empty devices
      shell: mkfs.xfs -q -f -L quobyte-dev -isize=1024 /dev/{{ item }}
      with_items:
        - "{{ flist_empty }}"
      register: _create_filesystems
      async: 1200
      poll: 0
      ignore_errors: yes
    - name: Wait for creation to finish
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: _jobs1
      until: _jobs1.finished
      delay: 5
      retries: 1000
      with_items: "{{ _create_filesystems.results }}"
      ignore_errors: yes
    - name: Create quobyte label list
      shell: lsblk -o name,label |grep quobyte-dev |awk '{print $1}'
      register: _quobyte_labeled
    - set_fact: f_quobyte_labeled="{{ _quobyte_labeled.stdout_lines }}"
    - name: Check number of devices
      shell:
        cmd: lsblk -o name,label |grep quobyte-dev |awk '{print $1}'
      register: _number_devices
- hosts: bootstrap
  vars_files:
    - vars/quobyte.yaml
  become: yes
  tasks:
    - name: Install Quobyte bootstrap
      shell:
        cmd: ~/install_quobyte bootstrap --repo-id {{ repo_id }} --services registry,data,metadata,api,webconsole --registry-endpoints {{ registry }}
    - name: Copy Quobyte memory config
      copy:
         src: templates/quobyte-mem
         dest: /etc/default/quobyte
    - name: Install Quobyte client
      shell:
        cmd: ~/install_quobyte add-client --repo-id {{ repo_id }} --registry-endpoints {{ registry }} --mount-point {{ mountpoint }}
    - name: Configure quobyte client configuration
      blockinfile:
        path: /etc/quobyte/client-service.cfg
        block: |
          options=default_permissions
          disable-xattrs
    - name: Remove some items from tuned
      lineinfile:
        state: absent
        path: /usr/lib/tuned/quobyte-server-performance/tuned.conf
        regexp: '^net.core.*_max'
      ignore_errors: yes
    - name: Add optimizations to tuned
      blockinfile:
        path: /usr/lib/tuned/quobyte-server-performance/tuned.conf
        insertafter: 'net.ipv4.tcp_slow_start_after_idle = 0'
        block: |
          net.core.netdev_max_backlog=64000
          net.core.rmem_max = 2147483647
          net.core.wmem_max = 2147483647
          net.ipv4.tcp_rmem = 4096 87380 2147483647
          net.ipv4.tcp_wmem = 4096 65536 2147483647
          net.ipv4.tcp_congestion_control=htcp
          fs.xfs.xfssyncd_centisecs = 10000
    - name: Set Quobyte tuned server profile
      shell:
        cmd: tuned-adm profile quobyte-server-performance
- hosts: nodes
  vars_files:
    - vars/quobyte.yaml
  become: yes
  tasks:
    - name: Add node to cluster
      shell:
        cmd: ~/install_quobyte add --repo-id {{ repo_id }} --services registry,data,metadata,api,webconsole --registry-endpoints {{ registry }}
    - name: Copy Quobyte memory config
      copy:
         src: templates/quobyte-mem
         dest: /etc/default/quobyte
    - name: Install Quobyte client
      shell:
        cmd: ~/install_quobyte add-client --repo-id {{ repo_id }} --registry-endpoints {{ registry }} --mount-point {{ mountpoint }}
    - name: Configure quobyte client configuration
      blockinfile:
        path: /etc/quobyte/client-service.cfg
        block: |
          options=default_permissions
          disable-xattrs
    - name: Remove some items from tuned
      lineinfile:
        state: absent
        path: /usr/lib/tuned/quobyte-server-performance/tuned.conf
        regexp: '^net.core.*_max'
      ignore_errors: yes
    - name: Add optimizations to tuned
      blockinfile:
        path: /usr/lib/tuned/quobyte-server-performance/tuned.conf
        insertafter: 'net.ipv4.tcp_slow_start_after_idle = 0'
        block: |
          net.core.netdev_max_backlog=64000
          net.core.rmem_max = 2147483647
          net.core.wmem_max = 2147483647
          net.ipv4.tcp_rmem = 4096 87380 2147483647
          net.ipv4.tcp_wmem = 4096 65536 2147483647
          net.ipv4.tcp_congestion_control=htcp
          fs.xfs.xfssyncd_centisecs = 10000
    - name: Set Quobyte tuned server profile
      shell:
        cmd: tuned-adm profile quobyte-server-performance
    - pause:
        seconds: 10
    - name: Check number of mounts
      shell:
        cmd: mount -l |grep -c quobyte-dev
      register: _mount_number
    - debug: var=_mount_number.stdout
- hosts: diskformat
  vars_files:
  - vars/quobyte.yaml
  become: yes
  tasks:
    - name: Select the Metadata disk based on mddisksize
      shell:
        cmd: lsblk -o name,label,size |grep quobyte-dev |grep {{ mddisksize }} |awk 'NR==1{print $1}'
      register: list_m
    - set_fact: flist_m="{{ list_m.stdout_lines }}"
    - debug: var=list_m.stdout_lines
    - name: Create metadata disk
      shell: qmkdev -t M /var/lib/quobyte/mnt/inspector-{{ item }}
      with_items:
        - "{{ flist_m }}"
    - set_fact:
        flist_d: "{{ flist_empty | difference (flist_m) }}"
    - debug: var=flist_d
    - name: Create Quobyte Data devices
      shell: qmkdev -t D /var/lib/quobyte/mnt/inspector-{{ item }}
      with_items:
        - "{{ flist_d }}"
      register: _create_data_devices
      async: 1200
      poll: 0
    - debug: var=flist_d
    - name: Wait for creation to finish
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: _jobs3
      until: _jobs3.finished
      delay: 5
      retries: 1000
      with_items: "{{ _create_data_devices.results }}"
- hosts: cluster
  vars_files:
  - vars/quobyte.yaml
  become: yes
  tasks:
    - name: Start and enable Quobyte metadata service
      service:
        name: quobyte-metadata
        state: started
        enabled: yes
    - name: Copy quobyte-data configuration
      copy:
         src: templates/quobyte-data
         dest: /usr/bin/quobyte-data
    - name: Start and enable Quobyte data service
      service:
        name: quobyte-data
        state: restarted
        enabled: yes
    - name: Start and enable Quobyte api service
      service:
        name: quobyte-api
        state: started
        enabled: yes
    - name: Start and enable Quobyte webconsole  service
      service:
        name: quobyte-webconsole
        state: started
        enabled: yes
    - name: Start quobyte-client
      service:
        name: quobyte-client
        state: restarted
        enabled: yes
    - name: Wait until metadata service is ready
      wait_for:
        path: /var/log/quobyte/metadata.log
        search_regex: "volume initialization complete"
    - name: Wait until api service is ready
      wait_for:
        path: /var/log/quobyte/api.log
        search_regex: "API service is now ready"
- hosts: bootstrap
  vars_files:
    - vars/quobyte.yaml
  become: yes
  tasks:
    - name: Copy system configuration
      copy:
         src: templates/system.config
         dest: /tmp/
    - replace:
        path: /tmp/system.config
        regexp: '__NW__'
        replace: '{{ network }}'
    - replace:
        path: /tmp/system.config
        regexp: '__S3__'
        replace: '{{ s3_endpoint }}'
    - name: Import system configuration
      shell:
        cmd: /usr/bin/qmgmt systemconfig import /tmp/system.config
- hosts: cluster
  become: yes
  tasks:
    - name: Start quobyte-s3
      service:
        name: quobyte-s3
        state: restarted
        enabled: yes
- hosts: diskformat,!nodes
  vars_files:
  - vars/quobyte.yaml
  become: yes
  tasks:
    - name: Copy default volume configuration
      copy:
         src: templates/
         dest: /tmp/
    - name: Import rf1 volume configuration
      shell:
        cmd: /usr/bin/qmgmt volume config import Single-replica /tmp/Single-replica.cfg
    - name: Import rf3 volume configuration
      shell:
        cmd: /usr/bin/qmgmt volume config import Default-replicated /tmp/Default-replicated.cfg
    - name: Import ec2+1 volume configuration
      shell:
        cmd: /usr/bin/qmgmt volume config import EC-2plus1 /tmp/EC-2plus1.cfg
    - name: Import ec2+1-small volume configuration
      shell:
        cmd: /usr/bin/qmgmt volume config import EC-2plus1-small /tmp/EC-2plus1-small.cfg
    - name: Import ec4+2 volume configuration
      shell:
        cmd: /usr/bin/qmgmt volume config import EC-4plus2 /tmp/EC-4plus2.cfg
    - name: Import ec4+2-small volume configuration
      shell:
        cmd: /usr/bin/qmgmt volume config import EC-4plus2-small /tmp/EC-4plus2-small.cfg
    - name: Import ec8+2 volume configuration
      shell:
        cmd: /usr/bin/qmgmt volume config import EC-8plus2 /tmp/EC-8plus2.cfg
    - name: Import ec8+2-small volume configuration
      shell:
        cmd: /usr/bin/qmgmt volume config import EC-8plus2-small /tmp/EC-8plus2-small.cfg
    - name: Import s3 volume configuration
      shell:
        cmd: /usr/bin/qmgmt volume config import S3-objects /tmp/S3-objects.cfg
    - name: Create default rf1 volume
      shell:
        cmd: /usr/bin/qmgmt volume create vol0-rf1 root root Single-replica
    - name: Create default rf3 volume
      shell:
        cmd: /usr/bin/qmgmt volume create vol0-rf3 root root Default-replicated
    - name: Create default ec2+1 volume
      shell:
        cmd: /usr/bin/qmgmt volume create vol0-ec21 root root EC-2plus1
    - name: Create default ec2+1-small volume
      shell:
        cmd: /usr/bin/qmgmt volume create vol0-ec21-small root root EC-2plus1-small
    - name: Create default ec4+2 volume
      shell:
        cmd: /usr/bin/qmgmt volume create vol0-ec42 root root EC-4plus2
    - name: Create default ec4+2-small volume
      shell:
        cmd: /usr/bin/qmgmt volume create vol0-ec42-small root root EC-4plus2-small
    - name: Create default ec8+2 volume
      shell:
        cmd: /usr/bin/qmgmt volume create vol0-ec82 root root EC-8plus2
    - name: Create default ec8+2-small volume
      shell:
        cmd: /usr/bin/qmgmt volume create vol0-ec82-small root root EC-8plus2-small
